# Services Architecture - Cartos RESP 2025

## Service Registry Pattern

### MapRegistry System
Central registry managing available map services:

**Configuration-Driven Architecture:**
- ServiceConfig objects define service metadata, form controls, and rendering options
- ServiceFactory creates MapService instances and renderer functions from configurations
- Pre-configured registry automatically registers all services using factory pattern
- Registry provides discovery methods (get, getAll, getIds) with type-safe MapServiceEntry interface

**Service Lifecycle:**
1. Configuration loading from dedicated config files
2. Service and renderer creation via ServiceFactory during app initialization  
3. Automatic service registration in pre-configured MapRegistry
4. Service discovery through registry queries and data loading on demand

## Configuration Architecture

### ServiceConfig Pattern
Service definitions use declarative configuration objects:

**Configuration Structure:**
- Service metadata (id, title, dataFile paths)
- FormControl arrays with key, label, and entries properties
- Rendering configuration (color schemes, title templates, tooltip settings)
- Data processing options (normalization, key mappings)

**Configuration Location:**
- Dedicated config files in `src/config/` folder
- Separation of configuration from instantiation logic
- Centralized service definitions for maintainability

### ServiceFactory Pattern
Factory class handles service and renderer creation:

**Factory Methods:**
- `ServiceFactory.createService()` - Creates MapService instances from ServiceConfig
- `ServiceFactory.createRenderer()` - Creates renderer functions from ServiceConfig
- `ServiceFactory.create()` - Creates both service and renderer as a tuple

**Benefits:**
- Consistent instantiation logic across all services
- Separation of configuration from creation concerns
- Scalable pattern for adding new services

## MapService Base Class

### Core Functionality
Abstract service class providing:
- CSV data loading via D3
- Form control configuration management (FormControl[])
- Selected form controls state tracking
- Filtered data computation based on selections

### Data Filtering Logic
The filteredData getter supports multiple data formats:
- Couverture data: filters by "Libelle" column matching facility selection
- Duree data: filters by "Source" column matching facility selection  
- Eloignement/Evolution data: uses same filtering pattern as other services
- Fallback: returns unfiltered data for unknown formats

### Form Control Management
- formControls array stores FormControl objects with key, label, and entries properties
- selectedFormControls Map tracks current user choices by control key
- Default selections initialize from first available entry in each FormControl
- FormControl structure provides user-friendly display names and organized entry groups

### FormControl Structure
Each service defines formControls as an array of FormControl objects:

**FormControl Interface:**
- key: Unique identifier for the control (e.g., 'metric', 'facility')
- label: User-friendly display label (e.g., 'Indicateur', 'Service', 'Temps d\'accès')
- entries: Array of InputEntry objects with label and key properties

**Standard Control Types:**
- metric: Defines available data metrics for visualization
- facility: Defines available facilities or services to filter by
- Custom controls: Services can define specialized control types

**Display Names by Service:**
- Standard: 'Indicateur' for metrics, 'Service' for facilities
- Eloignement: 'Temps d\'accès' for time-based metric controls

## Service Configurations

### Couverture Configuration
**Configuration File:** `src/config/couvertures.ts`
**Data Source:** `/data/couverture.csv`
**Title:** "Couverture des équipements et services"
**Metrics:** Population coverage percentage, commune equipment percentage
**Facilities:** 33 facility types (airports, postal services, healthcare, education)
**Rendering:** Blue/purple color schemes with percentage-based scales

### Duree Configuration  
**Configuration File:** `src/config/duree.ts`
**Data Source:** `/data/duree.csv`
**Title:** "Durées d'accès aux équipements ou services publics"
**Metrics:** Median duration, average duration (in minutes)
**Facilities:** Police and Gendarmerie services
**Rendering:** Red/orange color schemes with time-based scales

### Eloignement Configuration
**Configuration File:** `src/config/eloignement.ts`
**Data Source:** `/data/eloignement.csv`
**Title:** "Éloignements des populations aux équipements ou services publics"
**Metrics:** Time thresholds (5, 10, 15, 20, 30, 45, 60 minutes)
**Facilities:** Police, Gendarmerie, and Bureau de poste services
**Rendering:** Distance-based color schemes

### Evolution Configuration
**Configuration File:** `src/config/evolution.ts`
**Data Source:** `/data/evolution.csv`
**Title:** "Évolution du maillage des équipements ou services publics entre 2019 et 2024"
**Metrics:** Evolution percentage, evolution count (2019-2024 change)
**Facilities:** 10 facility types focusing on key public services
**Rendering:** Diverging color schemes for change visualization

## Renderer Architecture

### Factory-Generated Renderers
ServiceFactory creates renderer functions from ServiceConfig objects using the generic choropleth system:

**Common Parameters:**
- plotTitle: Dynamic title based on selections
- tabularData: Filtered service data
- featureCollection: Geographic boundaries
- colorScale: Service-specific color schemes and legends

**Data Mapping:**
- featureKey: Extracts department codes from geographic features
- rowKey: Extracts department codes from tabular data
- valueAccessor: Retrieves metric values for visualization
- numberNormalizer: Handles decimal formatting (comma to dot)

### Visualization Differences
**Couverture Maps:**
- Percentage-based color scales with quantize type
- Blue scheme for population coverage, purple for commune equipment
- Dual-metric tooltips showing both coverage types

**Duree Maps:**
- Time-based color scales for duration visualization
- Orange scheme for median duration, red for average duration
- Tooltips with time formatting and duration context

**Eloignement Maps:**
- Distance threshold visualization with appropriate color schemes
- Time-based metrics showing population accessibility
- Facility-specific color palettes

**Evolution Maps:**
- Diverging color schemes for change visualization
- Percentage vs count change options
- Historical comparison tooltips (2019-2024)